// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class TestNativeInlineTable : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TestNativeInlineTable {
        __init(_i, _bb)
        return this
    }
    fun t(j: Int) : MyGame.Example.NativeInlineTable? = t(MyGame.Example.NativeInlineTable(), j)
    fun t(obj: MyGame.Example.NativeInlineTable, j: Int) : MyGame.Example.NativeInlineTable? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val tLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsTestNativeInlineTable(_bb: ByteBuffer): TestNativeInlineTable = getRootAsTestNativeInlineTable(_bb, TestNativeInlineTable())
        fun getRootAsTestNativeInlineTable(_bb: ByteBuffer, obj: TestNativeInlineTable): TestNativeInlineTable {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTestNativeInlineTable(builder: FlatBufferBuilder, tOffset: Int) : Int {
            builder.startTable(1)
            addT(builder, tOffset)
            return endTestNativeInlineTable(builder)
        }
        fun startTestNativeInlineTable(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addT(builder: FlatBufferBuilder, t: Int) = builder.addOffset(0, t, 0)
        fun createTVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endTestNativeInlineTable(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
