// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Example
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestNativeInlineTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestNativeInlineTable GetRootAsTestNativeInlineTable(ByteBuffer _bb) { return GetRootAsTestNativeInlineTable(_bb, new TestNativeInlineTable()); }
  public static TestNativeInlineTable GetRootAsTestNativeInlineTable(ByteBuffer _bb, TestNativeInlineTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestNativeInlineTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Example.NativeInlineTable? T(int j) { int o = __p.__offset(4); return o != 0 ? (MyGame.Example.NativeInlineTable?)(new MyGame.Example.NativeInlineTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MyGame.Example.TestNativeInlineTable> CreateTestNativeInlineTable(FlatBufferBuilder builder,
      VectorOffset tOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TestNativeInlineTable.AddT(builder, tOffset);
    return TestNativeInlineTable.EndTestNativeInlineTable(builder);
  }

  public static void StartTestNativeInlineTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddT(FlatBufferBuilder builder, VectorOffset tOffset) { builder.AddOffset(0, tOffset.Value, 0); }
  public static VectorOffset CreateTVector(FlatBufferBuilder builder, Offset<MyGame.Example.NativeInlineTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTVectorBlock(FlatBufferBuilder builder, Offset<MyGame.Example.NativeInlineTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<MyGame.Example.NativeInlineTable>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<MyGame.Example.NativeInlineTable>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MyGame.Example.TestNativeInlineTable> EndTestNativeInlineTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.Example.TestNativeInlineTable>(o);
  }
  public TestNativeInlineTableT UnPack() {
    var _o = new TestNativeInlineTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TestNativeInlineTableT _o) {
    _o.T = new List<MyGame.Example.NativeInlineTableT>();
    for (var _j = 0; _j < this.TLength; ++_j) {_o.T.Add(this.T(_j).HasValue ? this.T(_j).Value.UnPack() : null);}
  }
  public static Offset<MyGame.Example.TestNativeInlineTable> Pack(FlatBufferBuilder builder, TestNativeInlineTableT _o) {
    if (_o == null) return default(Offset<MyGame.Example.TestNativeInlineTable>);
    var _t = default(VectorOffset);
    if (_o.T != null) {
      var __t = new Offset<MyGame.Example.NativeInlineTable>[_o.T.Count];
      for (var _j = 0; _j < __t.Length; ++_j) { __t[_j] = MyGame.Example.NativeInlineTable.Pack(builder, _o.T[_j]); }
      _t = CreateTVector(builder, __t);
    }
    return CreateTestNativeInlineTable(
      builder,
      _t);
  }
}

public class TestNativeInlineTableT
{
  [Newtonsoft.Json.JsonProperty("t")]
  public List<MyGame.Example.NativeInlineTableT> T { get; set; }

  public TestNativeInlineTableT() {
    this.T = null;
  }
}


}
