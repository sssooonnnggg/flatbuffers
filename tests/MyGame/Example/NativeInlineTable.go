// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NativeInlineTableT struct {
	A int32 `json:"a"`
}

func (t *NativeInlineTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	NativeInlineTableStart(builder)
	NativeInlineTableAddA(builder, t.A)
	return NativeInlineTableEnd(builder)
}

func (rcv *NativeInlineTable) UnPackTo(t *NativeInlineTableT) {
	t.A = rcv.A()
}

func (rcv *NativeInlineTable) UnPack() *NativeInlineTableT {
	if rcv == nil { return nil }
	t := &NativeInlineTableT{}
	rcv.UnPackTo(t)
	return t
}

type NativeInlineTable struct {
	_tab flatbuffers.Table
}

func GetRootAsNativeInlineTable(buf []byte, offset flatbuffers.UOffsetT) *NativeInlineTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NativeInlineTable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNativeInlineTable(buf []byte, offset flatbuffers.UOffsetT) *NativeInlineTable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NativeInlineTable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NativeInlineTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NativeInlineTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NativeInlineTable) A() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NativeInlineTable) MutateA(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func NativeInlineTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NativeInlineTableAddA(builder *flatbuffers.Builder, a int32) {
	builder.PrependInt32Slot(0, a, 0)
}
func NativeInlineTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
