// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class NativeInlineTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static NativeInlineTable getRootAsNativeInlineTable(ByteBuffer _bb) { return getRootAsNativeInlineTable(_bb, new NativeInlineTable()); }
  public static NativeInlineTable getRootAsNativeInlineTable(ByteBuffer _bb, NativeInlineTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NativeInlineTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int a() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateA(int a) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, a); return true; } else { return false; } }

  public static int createNativeInlineTable(FlatBufferBuilder builder,
      int a) {
    builder.startTable(1);
    NativeInlineTable.addA(builder, a);
    return NativeInlineTable.endNativeInlineTable(builder);
  }

  public static void startNativeInlineTable(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addA(FlatBufferBuilder builder, int a) { builder.addInt(0, a, 0); }
  public static int endNativeInlineTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public NativeInlineTable get(int j) { return get(new NativeInlineTable(), j); }
    public NativeInlineTable get(NativeInlineTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public NativeInlineTableT unpack() {
    NativeInlineTableT _o = new NativeInlineTableT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(NativeInlineTableT _o) {
    int _oA = a();
    _o.setA(_oA);
  }
  public static int pack(FlatBufferBuilder builder, NativeInlineTableT _o) {
    if (_o == null) return 0;
    return createNativeInlineTable(
      builder,
      _o.getA());
  }
}

