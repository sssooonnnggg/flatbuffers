# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Example

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NativeInlineTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NativeInlineTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNativeInlineTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NativeInlineTableBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x4E\x53", size_prefixed=size_prefixed)

    # NativeInlineTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NativeInlineTable
    def A(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NativeInlineTableStart(builder): builder.StartObject(1)
def Start(builder):
    return NativeInlineTableStart(builder)
def NativeInlineTableAddA(builder, a): builder.PrependInt32Slot(0, a, 0)
def AddA(builder, a):
    return NativeInlineTableAddA(builder, a)
def NativeInlineTableEnd(builder): return builder.EndObject()
def End(builder):
    return NativeInlineTableEnd(builder)

class NativeInlineTableT(object):

    # NativeInlineTableT
    def __init__(self):
        self.a = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nativeInlineTable = NativeInlineTable()
        nativeInlineTable.Init(buf, pos)
        return cls.InitFromObj(nativeInlineTable)

    @classmethod
    def InitFromObj(cls, nativeInlineTable):
        x = NativeInlineTableT()
        x._UnPack(nativeInlineTable)
        return x

    # NativeInlineTableT
    def _UnPack(self, nativeInlineTable):
        if nativeInlineTable is None:
            return
        self.a = nativeInlineTable.A()

    # NativeInlineTableT
    def Pack(self, builder):
        NativeInlineTableStart(builder)
        NativeInlineTableAddA(builder, self.a)
        nativeInlineTable = NativeInlineTableEnd(builder)
        return nativeInlineTable
