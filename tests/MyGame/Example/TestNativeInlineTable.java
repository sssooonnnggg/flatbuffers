// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Example;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TestNativeInlineTable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static TestNativeInlineTable getRootAsTestNativeInlineTable(ByteBuffer _bb) { return getRootAsTestNativeInlineTable(_bb, new TestNativeInlineTable()); }
  public static TestNativeInlineTable getRootAsTestNativeInlineTable(ByteBuffer _bb, TestNativeInlineTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TestNativeInlineTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Example.NativeInlineTable t(int j) { return t(new MyGame.Example.NativeInlineTable(), j); }
  public MyGame.Example.NativeInlineTable t(MyGame.Example.NativeInlineTable obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Example.NativeInlineTable.Vector tVector() { return tVector(new MyGame.Example.NativeInlineTable.Vector()); }
  public MyGame.Example.NativeInlineTable.Vector tVector(MyGame.Example.NativeInlineTable.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTestNativeInlineTable(FlatBufferBuilder builder,
      int tOffset) {
    builder.startTable(1);
    TestNativeInlineTable.addT(builder, tOffset);
    return TestNativeInlineTable.endTestNativeInlineTable(builder);
  }

  public static void startTestNativeInlineTable(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addT(FlatBufferBuilder builder, int tOffset) { builder.addOffset(0, tOffset, 0); }
  public static int createTVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTestNativeInlineTable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TestNativeInlineTable get(int j) { return get(new TestNativeInlineTable(), j); }
    public TestNativeInlineTable get(TestNativeInlineTable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TestNativeInlineTableT unpack() {
    TestNativeInlineTableT _o = new TestNativeInlineTableT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TestNativeInlineTableT _o) {
    MyGame.Example.NativeInlineTableT[] _oT = new MyGame.Example.NativeInlineTableT[tLength()];
    for (int _j = 0; _j < tLength(); ++_j) {_oT[_j] = (t(_j) != null ? t(_j).unpack() : null);}
    _o.setT(_oT);
  }
  public static int pack(FlatBufferBuilder builder, TestNativeInlineTableT _o) {
    if (_o == null) return 0;
    int _t = 0;
    if (_o.getT() != null) {
      int[] __t = new int[_o.getT().length];
      int _j = 0;
      for (MyGame.Example.NativeInlineTableT _e : _o.getT()) { __t[_j] = MyGame.Example.NativeInlineTable.pack(builder, _e); _j++;}
      _t = createTVector(builder, __t);
    }
    return createTestNativeInlineTable(
      builder,
      _t);
  }
}

