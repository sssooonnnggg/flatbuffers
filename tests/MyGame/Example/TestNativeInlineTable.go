// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TestNativeInlineTableT struct {
	T []*NativeInlineTableT `json:"t"`
}

func (t *TestNativeInlineTableT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	tOffset := flatbuffers.UOffsetT(0)
	if t.T != nil {
		tLength := len(t.T)
		tOffsets := make([]flatbuffers.UOffsetT, tLength)
		for j := 0; j < tLength; j++ {
			tOffsets[j] = t.T[j].Pack(builder)
		}
		TestNativeInlineTableStartTVector(builder, tLength)
		for j := tLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(tOffsets[j])
		}
		tOffset = builder.EndVector(tLength)
	}
	TestNativeInlineTableStart(builder)
	TestNativeInlineTableAddT(builder, tOffset)
	return TestNativeInlineTableEnd(builder)
}

func (rcv *TestNativeInlineTable) UnPackTo(t *TestNativeInlineTableT) {
	tLength := rcv.TLength()
	t.T = make([]*NativeInlineTableT, tLength)
	for j := 0; j < tLength; j++ {
		x := NativeInlineTable{}
		rcv.T(&x, j)
		t.T[j] = x.UnPack()
	}
}

func (rcv *TestNativeInlineTable) UnPack() *TestNativeInlineTableT {
	if rcv == nil { return nil }
	t := &TestNativeInlineTableT{}
	rcv.UnPackTo(t)
	return t
}

type TestNativeInlineTable struct {
	_tab flatbuffers.Table
}

func GetRootAsTestNativeInlineTable(buf []byte, offset flatbuffers.UOffsetT) *TestNativeInlineTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TestNativeInlineTable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTestNativeInlineTable(buf []byte, offset flatbuffers.UOffsetT) *TestNativeInlineTable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TestNativeInlineTable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TestNativeInlineTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TestNativeInlineTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TestNativeInlineTable) T(obj *NativeInlineTable, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TestNativeInlineTable) TLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TestNativeInlineTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TestNativeInlineTableAddT(builder *flatbuffers.Builder, t flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(t), 0)
}
func TestNativeInlineTableStartTVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TestNativeInlineTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
