// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class NativeInlineTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NativeInlineTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNativeInlineTable(bb:flatbuffers.ByteBuffer, obj?:NativeInlineTable):NativeInlineTable {
  return (obj || new NativeInlineTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNativeInlineTable(bb:flatbuffers.ByteBuffer, obj?:NativeInlineTable):NativeInlineTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NativeInlineTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

a():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_a(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

static getFullyQualifiedName():string {
  return 'MyGame_Example_NativeInlineTable';
}

static startNativeInlineTable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt32(0, a, 0);
}

static endNativeInlineTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNativeInlineTable(builder:flatbuffers.Builder, a:number):flatbuffers.Offset {
  NativeInlineTable.startNativeInlineTable(builder);
  NativeInlineTable.addA(builder, a);
  return NativeInlineTable.endNativeInlineTable(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):NativeInlineTable {
  return NativeInlineTable.getRootAsNativeInlineTable(new flatbuffers.ByteBuffer(buffer))
}

unpack(): NativeInlineTableT {
  return new NativeInlineTableT(
    this.a()
  );
}


unpackTo(_o: NativeInlineTableT): void {
  _o.a = this.a();
}
}

export class NativeInlineTableT {
constructor(
  public a: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return NativeInlineTable.createNativeInlineTable(builder,
    this.a
  );
}
}
