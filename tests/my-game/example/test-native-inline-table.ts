// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { NativeInlineTable, NativeInlineTableT } from '../../my-game/example/native-inline-table';


export class TestNativeInlineTable {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TestNativeInlineTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTestNativeInlineTable(bb:flatbuffers.ByteBuffer, obj?:TestNativeInlineTable):TestNativeInlineTable {
  return (obj || new TestNativeInlineTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTestNativeInlineTable(bb:flatbuffers.ByteBuffer, obj?:TestNativeInlineTable):TestNativeInlineTable {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TestNativeInlineTable()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

t(index: number, obj?:NativeInlineTable):NativeInlineTable|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NativeInlineTable()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static getFullyQualifiedName():string {
  return 'MyGame_Example_TestNativeInlineTable';
}

static startTestNativeInlineTable(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addT(builder:flatbuffers.Builder, tOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tOffset, 0);
}

static createTVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTestNativeInlineTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTestNativeInlineTable(builder:flatbuffers.Builder, tOffset:flatbuffers.Offset):flatbuffers.Offset {
  TestNativeInlineTable.startTestNativeInlineTable(builder);
  TestNativeInlineTable.addT(builder, tOffset);
  return TestNativeInlineTable.endTestNativeInlineTable(builder);
}

serialize():Uint8Array {
  return this.bb!.bytes();
}

static deserialize(buffer: Uint8Array):TestNativeInlineTable {
  return TestNativeInlineTable.getRootAsTestNativeInlineTable(new flatbuffers.ByteBuffer(buffer))
}

unpack(): TestNativeInlineTableT {
  return new TestNativeInlineTableT(
    this.bb!.createObjList(this.t.bind(this), this.tLength())
  );
}


unpackTo(_o: TestNativeInlineTableT): void {
  _o.t = this.bb!.createObjList(this.t.bind(this), this.tLength());
}
}

export class TestNativeInlineTableT {
constructor(
  public t: (NativeInlineTableT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const t = TestNativeInlineTable.createTVector(builder, builder.createObjectOffsetList(this.t));

  return TestNativeInlineTable.createTestNativeInlineTable(builder,
    t
  );
}
}
